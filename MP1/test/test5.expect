#!/usr/bin/env expect

proc abort { } { send_user "Timeout!" ; exit 2 }
set timeout 5
expect_before timeout abort

spawn ./server.sh
set server $spawn_id
expect "Server listening on"

set i 1
while {$i < 11} {
    spawn ./client.sh u$i
    set u$i $spawn_id
    expect "Cmd> "
    incr i
}

# group 1
send -i $u1 "follow u2\r"
expect -i $u1 "Command completed successfully"
send -i $u2 "follow u1\r"
expect -i $u2 "Command completed successfully"

# group 2
send -i $u3 "follow u4\r"
expect -i $u3 "Command completed successfully"
send -i $u4 "follow u5\r"
expect -i $u4 "Command completed successfully"
send -i $u5 "follow u3\r"
expect -i $u5 "Command completed successfully"

# group 3
send -i $u6 "follow u7\r"
expect -i $u6 "Command completed successfully"
send -i $u6 "follow u8\r"
expect -i $u6 "Command completed successfully"
send -i $u6 "follow u9\r"
expect -i $u6 "Command completed successfully"
send -i $u6 "follow u10\r"
expect -i $u6 "Command completed successfully"
send -i $u7 "follow u6\r"
expect -i $u7 "Command completed successfully"
send -i $u7 "follow u8\r"
expect -i $u7 "Command completed successfully"
send -i $u7 "follow u9\r"
expect -i $u7 "Command completed successfully"
send -i $u7 "follow u10\r"
expect -i $u7 "Command completed successfully"
send -i $u8 "follow u6\r"
expect -i $u8 "Command completed successfully"
send -i $u8 "follow u7\r"
expect -i $u8 "Command completed successfully"
send -i $u8 "follow u9\r"
expect -i $u8 "Command completed successfully"
send -i $u8 "follow u10\r"
expect -i $u8 "Command completed successfully"
send -i $u9 "follow u6\r"
expect -i $u9 "Command completed successfully"
send -i $u9 "follow u7\r"
expect -i $u9 "Command completed successfully"
send -i $u9 "follow u8\r"
expect -i $u9 "Command completed successfully"
send -i $u9 "follow u10\r"
expect -i $u9 "Command completed successfully"
send -i $u10 "follow u6\r"
expect -i $u10 "Command completed successfully"
send -i $u10 "follow u7\r"
expect -i $u10 "Command completed successfully"
send -i $u10 "follow u8\r"
expect -i $u10 "Command completed successfully"
send -i $u10 "follow u9\r"
expect -i $u10 "Command completed successfully"

# enter timeline
send -i $u1 "timeline\r"
expect -i $u1 "Now you are in the timeline"
send -i $u2 "timeline\r"
expect -i $u2 "Now you are in the timeline"
send -i $u3 "timeline\r"
expect -i $u3 "Now you are in the timeline"
send -i $u4 "timeline\r"
expect -i $u4 "Now you are in the timeline"
send -i $u5 "timeline\r"
expect -i $u5 "Now you are in the timeline"
send -i $u6 "timeline\r"
expect -i $u6 "Now you are in the timeline"
send -i $u7 "timeline\r"
expect -i $u7 "Now you are in the timeline"
send -i $u8 "timeline\r"
expect -i $u8 "Now you are in the timeline"
send -i $u9 "timeline\r"
expect -i $u9 "Now you are in the timeline"
send -i $u10 "timeline\r"
expect -i $u10 "Now you are in the timeline"

# no way to make sure all clients are actually in the timeline
# (Now you are in the timeline is printed before RPC actually starts)
sleep 1

# send messages (enforcing ordering by also testing recieved messages)
send -i $u1 "p1\r"
expect -i $u2 "p1"

send -i $u2 "p2\r"
expect -i $u1 "p2"

send -i $u1 "p3\r"
expect -i $u2 "p3"

send -i $u2 "p4\r"
expect -i $u1 "p4"

send -i $u3 "p5\r"
expect -i $u5 "p5"

send -i $u4 "p6\r"
expect -i $u3 "p6"

send -i $u5 "p7\r"
expect -i $u4 "p7"

send -i $u6 "p8\r"
expect -i $u7 "p8"
expect -i $u8 "p8"
expect -i $u9 "p8"
expect -i $u10 "p8"

send -i $u7 "p9\r"
expect -i $u6 "p9"
expect -i $u8 "p9"
expect -i $u9 "p9"
expect -i $u10 "p9"

send -i $u8 "p10\r"
expect -i $u6 "p10"
expect -i $u7 "p10"
expect -i $u9 "p10"
expect -i $u10 "p10"

send -i $u9 "p11\r"
expect -i $u6 "p11"
expect -i $u7 "p11"
expect -i $u8 "p11"
expect -i $u10 "p11"

send -i $u10 "p12\r"
expect -i $u6 "p12"
expect -i $u7 "p12"
expect -i $u8 "p12"
expect -i $u9 "p12"

# kill server (clients dying first seems to send rogue messages to server
# which pollutes the timeline files)
send -i $server "\x03"